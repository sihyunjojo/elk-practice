input {
  file {
    #https://www.elastic.co/guide/en/logstash/current/plugins-inputs-file.html
    #default is TAIL which assumes more data will come into the file.
    #change to mode => "read" if the file is a complete file.
    #by default, the file will be removed once reading is complete -- backup your files if you need them.
    # we will be using READ with the completed file action to log to a file.
    mode => "read"
    path => "/usr/share/logstash/ingest_data/*.csv" #specifying only csv files.
    exit_after_read => true # this tells logstash to exit after reading the file.  This is useful for running logstash as a "job". if you want logstash to continue to run and monitor for files, remove this line.
    file_completed_action => "log" # this tells logstash to log to the file specified in file_completed_log_path once its done reading the input file.
    file_completed_log_path => "/usr/share/logstash/ingest_data/logstash_completed.log"
  }
}

# 첫 번째 설정 (mode => "read")
# Mode: read 모드는 Logstash가 파일을 한 번만 읽고 종료되게 합니다. 이는 일반적으로 배치 작업이나 데이터 마이그레이션 시 사용됩니다.
# Path: "/usr/share/logstash/ingest_data/*.csv" 이 경로 설정은 .csv 확장자를 가진 파일들만 대상으로 합니다.
# Exit After Read: true로 설정되어 있어, 파일 읽기가 완료되면 Logstash 작업이 종료됩니다.
# File Completed Action: log 옵션은 파일 처리가 완료된 후, 그 사실을 로그 파일에 기록하도록 합니다.
# File Completed Log Path: 처리 완료된 파일의 정보를 기록할 로그 파일의 경로를 지정합니다.



# input {
#  file {
#    #https://www.elastic.co/guide/en/logstash/current/plugins-inputs-file.html
#    #default is TAIL which assumes more data will come into the file.
#    #change to mode => "read" if the file is a compelte file.  by default, the file will be removed once reading is complete -- backup your files if you need them.
#    mode => "tail"
#    path => "/usr/share/logstash/ingest_data/*" # 원래 설정
#  }
# }
# 두 번째 설정 (mode => "tail")
# Mode: tail 모드는 파일 끝에 새로운 내용이 추가될 때마다 이를 계속 읽어들이는 모드입니다. 서버 로그 같이 지속적으로 업데이트되는 파일을 모니터링할 때 사용됩니다.
# Path: "/usr/share/logstash/ingest_data/*" 이 경로 설정은 ingest_data 폴더 내의 모든 파일을 대상으로 합니다.


filter {
}


output {
 elasticsearch {
   index => "logstash-%{+YYYY.MM.dd}"
   hosts=> "${ELASTIC_HOSTS}"
   user=> "${ELASTIC_USER}"
   password=> "${ELASTIC_PASSWORD}"
   cacert=> "certs/ca/ca.crt"
 }
}

# 네, 맞습니다. mode => "tail" 설정을 사용하고 있는 경우, Logstash는 /usr/share/logstash/ingest_data/* 경로에 있는 파일들이 업데이트될 때마다 새로운 내용을 읽어들입니다.
# 이 설정은 /usr/share/logstash/ingest_data/ 디렉토리 내의 모든 파일을 지속적으로 모니터링하여 새로운 데이터가 추가되면 이를 Elasticsearch에 전송합니다.
# 데이터는 날짜별 인덱스에 저장되며, SSL을 통해 안전하게 전송됩니다.



# 2021.11

# input {
#        # FileBeat를 통해 로그 수신
#        beats {
#                port => 5000
#                host => "0.0.0.0"
#                ssl => false
#        }
#
# }
#
# filter {
#        # Grok형식으로 들어오는 로그를 가공하기 위한 필터
#         grok {
#                 # 로그 안에 LOGLEVEL 패턴이 있을 경우 파싱하여 log_level이라는 필드로 추가
#                 # [INFO ]와 같이 스페이스를 남기는 설정을 고려하여 파싱함
#                 match => [
#                     "message", "\[%{LOGLEVEL:log_level}%{SPACE}*\]"
#                 ]
#         }
# }
#
# output {
#        # 처리한 로그를 Elastic 서버로 전송
#        elasticsearch {
#                # TODO 각자의 서버에 맞게 IP 변경
#                hosts => "서버IP:9200"
#                user => "elastic"
#                password => "changeme"
#                index => "logstash-%{+YYYY.MM.dd}"
#        }
# }

# Logstash 파이프라인 설정은 크게 다음의 3단계로 구성된다.
#
# Input: 로그를 전달 받음
# Filter: 전달받은 로그 메세지 가공
# Output: 처리한 로그 전송

